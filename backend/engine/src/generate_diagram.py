from typing import Any, Dict
from pydantic import BaseModel
import yaml

from models import model_registry

def generate_mermaid_diagram(yaml_file: str) -> str:
    with open(yaml_file, 'r') as file:
        workflow_data = yaml.safe_load(file)

    mermaid_diagram = ["stateDiagram"]
    mermaid_diagram.append("    [*] --> " + workflow_data['workflow'][0]['step'])

    for step in workflow_data['workflow']:
        step_name = step['step']
        next_step = step.get('next_step', 'exit')
        repeat_step = step.get('repeat_step', None)

        if next_step == 'exit':
            mermaid_diagram.append(f"    {step_name} --> [*]")
        else:
            mermaid_diagram.append(f"    {step_name} --> {next_step}")
            
        if repeat_step:
            mermaid_diagram.append(f"    {step_name} --> {repeat_step}")

    return "\n".join(mermaid_diagram)

def generate_model_table(model: BaseModel) -> str:
    """
    Generate a markdown table for a pydantic model's fields.
    """
    table_lines = ["| Field Name | Description |", "|------------|-------------|"]
    for field_name, field in model.model_fields.items():
        field_description = field.description or ""
        table_lines.append(f"| {field_name}  | {field_description} |")
    return "\n".join(table_lines) + "\n\n"


def generate_markdown(yaml_file: str, output_file: str):
    with open(yaml_file, 'r') as file:
        workflow_data = yaml.safe_load(file)
    
    markdown_lines = [
        "# Workflow Process Documentation",
        "\nThis document describes the workflow process, including detailed information about each step, input models, output models, and prompt templates.\n"
    ]
    
    mermaid_diagram = generate_mermaid_diagram(yaml_file)
    markdown_lines.append("## Workflow Diagram\n")
    markdown_lines.append("```mermaid")
    markdown_lines.append(mermaid_diagram)
    markdown_lines.append("```\n")
    
    
    for step in workflow_data['workflow']:
        step_name = step['step']
        description = step.get('description', 'No description provided.')
        input_model_name = step.get('input_model', 'None')
        output_model_name = step.get('output_model', 'None')
        prompt_template = step.get('prompt', 'No prompt template provided.')

        markdown_lines.append(f"## Step: {step_name}")
        markdown_lines.append(f"\n{description}\n")
        
        # Add input model details
        if input_model_name in model_registry:
            markdown_lines.append(f"\n### **Input Model**: `{input_model_name}`")
            markdown_lines.append(generate_model_table(model_registry[input_model_name]))
        else:
            markdown_lines.append(f"**Input Model**: `{input_model_name}` (Details not available)")
        
        
        markdown_lines.append("\n### **Prompt Template**:\n")
        markdown_lines.append(f"```")
        markdown_lines.append(prompt_template)
        markdown_lines.append(f"```")
        
        # Add output model details
        if output_model_name in model_registry:
            markdown_lines.append(f"\n### **Output Model**: `{output_model_name}`")
            markdown_lines.append(generate_model_table(model_registry[output_model_name]))
        else:
            markdown_lines.append(f"**Output Model**: `{output_model_name}` (Details not available)")

    markdown_lines.append("\nGenerated by the Python script.")

    with open(output_file, 'w') as output:
        output.write("\n".join(markdown_lines))
        

yaml_file_path = './src/research_process.yaml'  # Replace with the path to your YAML file
output_markdown_path = 'workflow_documentation.md'  # Output Markdown file
generate_markdown(yaml_file_path, output_markdown_path)
